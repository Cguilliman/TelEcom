name: Python Linting
on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

env:
  TF_VAR_rds_password: ${{ secrets.TF_VAR_RDS_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11.6
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.6'
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - name: Setup a local virtual environment (if no poetry.toml file)
        working-directory: ./api
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./api/.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install
        working-directory: ./api
      - name: Run the automated tests (for example)
        run: poetry run pytest -v
        working-directory: ./api

      - name: Run black
        working-directory: ./api
        run: |
          poetry run black --check .
      - name: Run isort
        working-directory: ./api
        run: |
          poetry run isort -c .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "true"
      - name: Build, tag, and push image to Amazon ECR
        run: |
          docker build -f api/Dockerfile -t 471112984780.dkr.ecr.eu-central-1.amazonaws.com/telecom-api --platform=linux/amd64 api
          docker push 471112984780.dkr.ecr.eu-central-1.amazonaws.com/telecom-api
          docker build -f nginx/Dockerfile -t 471112984780.dkr.ecr.eu-central-1.amazonaws.com/nginx:latest nginx
          docker push 471112984780.dkr.ecr.eu-central-1.amazonaws.com/nginx:latest

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
        working-directory: ./terraform
      - name: Terraform validate
        id: validate
        run: terraform validate
        working-directory: ./terraform
      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
        working-directory: ./terraform
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
        working-directory: ./terraform

